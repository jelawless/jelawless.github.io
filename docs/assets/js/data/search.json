[
  
  {
    "title": "PCB StreamDeck",
    "url": "/posts/StreamDeck/",
    "categories": "Electronics Project, PCBs, User Inerface Design, Prototyping and Development",
    "tags": "Microcontroller, Programming, CircuitPython, Hardware Prototyping, Raspberry Pi Pico, DIY Project",
    "date": "2024-04-03 22:33:00 -0500",
    





    
    "snippet": "IntroThis project details the creation of a custom macro keypad, affectionately dubbed the “PicoDeck,” built around the Raspberry Pi Pico. It features mechanical keyboard switches for tactile input...",
    "content": "IntroThis project details the creation of a custom macro keypad, affectionately dubbed the “PicoDeck,” built around the Raspberry Pi Pico. It features mechanical keyboard switches for tactile input and a rotary encoder for intuitive media control. The device leverages CircuitPython, chosen for its ease of use and robust file system access, enabling straightforward customization of macros and keymaps. A custom Human Interface Device (HID) library facilitates its function as a versatile keyboard and media controller, while a self-designed PCB ensures a clean and integrated build.PicoDeck Build DetailsCore ComponentsBelow is a list of the primary components used to build the PicoDeck.  Raspberry Pi Pico  Mechanical Keyboard Switches (e.g., Cherry MX, Gateron, Kailh)  Keycaps (Compatible with chosen switches)  Rotary Encoder (EC11 type with push button)  Custom PCB (Designed in KiCad)  USB Cable (Micro USB for Pico)  (Optional) 3D Printed EnclosureRaspberry Pi Pico  Description  The Raspberry Pi Pico is a low-cost, high-performance microcontroller board featuring the RP2040 chip. It was selected for this project due to its native USB support, ample GPIO pins, and excellent compatibility with CircuitPython. CircuitPython allows the Pico to appear as a USB mass storage device, making code updates as simple as editing a Python file.    Part List  Raspberry Pi Pico (https://www.raspberrypi.com/products/raspberry-pi-pico/)  Software Setup  CircuitPython must be flashed onto the Pico. This involves holding the BOOTSEL button while plugging it into a computer, then dragging the CircuitPython UF2 file onto the RPI-RP2 drive. Essential CircuitPython libraries, particularly adafruit_hid for keyboard and consumer control (media keys), and rotaryio for the encoder, are then copied to the lib folder on the CIRCUITPY drive.  Summary of Setup  Download the correct CircuitPython UF2 for the Pico. Enter BOOTSEL mode on the Pico. Copy the UF2 file. Install necessary libraries (adafruit_hid, rotaryio, adafruit_debouncer) into the lib folder on the CIRCUITPY drive.  Note: Ensure you download the latest stable version of CircuitPython and the corresponding library bundle from Adafruit to maintain compatibility and access the latest features.  Results  The Pico serves as the brain of the macro pad, running the CircuitPython code that scans for key presses and rotary encoder movements, and then sends the appropriate HID commands to the connected computer.Mechanical Keyboard Switches &amp; Keycaps  Description  Mechanical keyboard switches provide superior tactile feedback and durability compared to membrane keys. A variety of switch types (linear, tactile, clicky) can be chosen based on user preference. Keycaps are placed on top of the switches and can be customized for aesthetics and labeling. For this project, [Number] switches were used.    Part List            Mechanical Keyboard Switches (e.g., Gateron Browns, Cherry MX Reds)      Keycaps (MX-stem compatible, desired profile)        Assembly  Switches are typically press-fit into a compatible PCB or plate. If using a custom PCB, they will need to be soldered to the board. Keycaps are then pressed onto the switch stems.  Summary of Assembly  Mount switches onto the PCB. Solder switch pins to the PCB pads. Attach keycaps to the switches.  Note: Choose switches that match your desired feel and sound profile. Ensure keycaps are compatible with the switch stems (MX-style is most common). Careful soldering is required to avoid damaging switches or the PCB.  Results  Provides reliable and customizable physical inputs for triggering macros, shortcuts, or application commands. The tactile feel enhances the user experience.Rotary Encoder (EC11 with Push Button)  Description  An EC11-type rotary encoder allows for incremental adjustments (like volume control) and often includes a push-button switch (used here for play/pause). It provides a versatile input method beyond simple key presses.    Part List  EC11 Rotary Encoder with push-button (https://www.adafruit.com/product/377 or similar)          Knob for the encoder shaft        Assembly &amp; Software  The encoder is soldered to the PCB. In CircuitPython, the rotaryio library is used to read rotational changes, and digitalio along with adafruit_debouncer is used to read the push-button state. These inputs are then mapped to Consumer Control HID codes for volume up/down and play/pause.  Summary of Integration  Solder encoder to PCB. In code.py, initialize rotaryio.IncrementalEncoder for rotation and digitalio.DigitalInOut with adafruit_debouncer.Debouncer for the button. Map encoder events to HID media commands.  Note: Debouncing the push-button is crucial for reliable operation. The rotaryio library simplifies reading the encoder’s A/B phase signals. Ensure the encoder pins are correctly wired to the Pico’s GPIOs as defined in your code.py.  Results  Enables intuitive control over system volume by rotating the knob and play/pause functionality for media by pressing the knob.Custom PCB (KiCad Design)  Description  A custom Printed Circuit Board (PCB) was designed using KiCad EDA software. This allows for a compact and clean integration of the Raspberry Pi Pico, keyboard switches, rotary encoder, and any necessary supporting components (like diodes for a key matrix, if implemented). It eliminates messy point-to-point wiring.    Part List            Custom PCB (fabricated from Gerber files generated by KiCad)      (Optional) Diodes (e.g., 1N4148) if implementing a key matrix.      Headers for Pico (optional, can solder Pico directly).        Design &amp; Fabrication  The PCB layout involves placing footprints for all components, routing traces to connect them according to the schematic, and then generating Gerber files. These Gerbers are sent to a PCB fabrication house (e.g., JLCPCB, PCBWay, OSH Park) for manufacturing.  Summary of Process  Design schematic in KiCad. Lay out components and route traces on PCB. Generate Gerber files. Order PCB from a fabrication service. Solder all components onto the received PCB.  Note: Designing a PCB can have a learning curve. Pay close attention to component footprints, trace widths, and clearance rules. For a key matrix, ensure correct diode orientation. Thoroughly check your design before sending it for fabrication to avoid costly errors.  Results  A professional-looking and robust platform for all components. Simplifies assembly, improves reliability, and provides a solid foundation for the macro pad.CircuitPython &amp; Custom HID Programming  Description  CircuitPython was chosen for its Pythonic syntax, ease of iteration (code changes are live on save), and excellent library support. The adafruit_hid library is pivotal, providing classes to emulate a keyboard (Keyboard), mouse (Mouse), and consumer control device (ConsumerControl). This allows the PicoDeck to send standard keyboard shortcuts, type text, and control media playback.    Software Components            CircuitPython firmware for Raspberry Pi Pico      adafruit_hid CircuitPython library      rotaryio CircuitPython library      adafruit_debouncer CircuitPython library      Custom code.py script        Implementation  The main code.py script initializes the GPIO pins connected to switches and the rotary encoder. It runs a loop that:          Scans the state of each switch.      Reads the rotary encoder’s position and button state.      Based on detected inputs, uses the adafruit_hid.Keyboard object to send key presses/combinations (e.g., kbd.send(Keycode.CONTROL, Keycode.C)) or the adafruit_hid.ConsumerControl object to send media commands (e.g., cc.send(ConsumerControlCode.VOLUME_INCREMENT)).        Summary of Code Logic  Initialize HID devices (Keyboard, ConsumerControl). Configure GPIO pins for inputs. In the main loop, read all inputs. If an input event occurs (key press, encoder turn/press), send the corresponding HID report.  Note: To make the Pico appear as a composite HID device (e.g., keyboard + media controller), you might need to create a custom boot.py file to define the USB descriptors, or ensure your CircuitPython version handles this gracefully with multiple adafruit_hid device instances. The file system access of CircuitPython means you can easily edit code.py to change key mappings without re-flashing firmware.  Results  A highly customizable macro pad that can send complex keyboard shortcuts, type predefined strings, control applications, and manage media playback seamlessly on any computer that supports USB HID devices.(Optional) 3D Printed Enclosure  Description  To give the PicoDeck a finished look and protect the electronics, a custom enclosure can be 3D printed. The design can accommodate the PCB, switches, and rotary encoder, with an opening for the USB cable.    Part List            3D Printing Filament (e.g., PLA, PETG)      (Optional) Screws for assembly        Design &amp; Printing  The enclosure is designed in CAD software (e.g., Fusion 360, Tinkercad, OpenSCAD) to fit the assembled PCB and components. It’s then sliced and printed on a 3D printer.  Summary  Design enclosure around the assembled electronics. Print the parts. Assemble the PicoDeck into the enclosure.  Note: When designing, account for tolerances, port access (USB), and mounting points for the PCB. PLA is generally sufficient, but PETG offers more durability.  Results  A durable and aesthetically pleasing housing for the PicoDeck, making it a more robust and user-friendly desktop accessory.Full Build Guide &amp; ResourcesFor those interested in building their own PicoDeck, a more comprehensive step-by-step guide, including KiCad project files, CircuitPython code examples, and 3D printable enclosure STLs, will be made available.This detailed documentation will cover:  KiCad: Schematic and PCB layout walkthrough, Gerber generation.  CircuitPython: Full code.py examples for key scanning (direct IO or matrix), rotary encoder handling, debouncing, and sending various HID commands. Configuration for custom keymaps.  Assembly: Soldering tips, component placement, and final assembly.  Bill of Materials (BOM): Detailed list of all parts with suggested sources.Stay tuned for the link to the complete guide and project files!"
  },
  
  {
    "title": "Modified Ender 3 with Klipper",
    "url": "/posts/Klipper/",
    "categories": "3D Printing, 3D Printer Upgrades, Ender 3 Mods, Klipper Firmware",
    "tags": "Ender 3, Klipper, Firmware Upgrade, 3D Printer Tuning",
    "date": "2023-05-09 22:33:00 -0500",
    





    
    "snippet": "IntroThe printer used for the project is a refurbished Ender 3 model, which has undergone extensive modifications aimed at enhancing both print speed and quality. Additionally, it operates on an op...",
    "content": "IntroThe printer used for the project is a refurbished Ender 3 model, which has undergone extensive modifications aimed at enhancing both print speed and quality. Additionally, it operates on an open-source operating system called Klipper, facilitating ease of further customization and modification.Modifications SectionHardwareBelow is a list of the hardware modifications that the printer has undergone.  Raspberry Pi  Bed Distance Sensor  SKR Mini E3 V3 Motherboard  Dual Z axis  Direct Drive Orbiter V2.0 Extruder  Custom Hotend Cooling  CHT nozzle  Slimmer PSU  PTFE Bowden Tube Klipper Host (Raspberry Pi 3B+)  Description  The Raspberry Pi 3B+ serves as the dedicated host computer running the Klipper firmware. Klipper utilizes a dual-microcontroller architecture where the main computation (processing G-code, running advanced algorithms like Input Shaping) is offloaded from the 3D printer’s mainboard (SKR Mini) to the powerful Raspberry Pi. This enables the high-speed, high-precision performance the modified Ender 3 is capable of. It also hosts the web interface (Mainsail/Fluidd) for remote control and monitoring.   Part List  Raspberry Pi 3 Model B+, SD Card (32GB+), Power Supply (5V, 2.5A minimum), and a case.  Klipper Configuration  Involves flashing a pre-configured OS (like MainsailOS or FluiddPi) onto the SD card. The Pi then communicates with the SKR Mini E3 V3 via a USB cable, where the Klipper service is run and manages the entire print process using the customized printer.cfg file.  Note: Using the Raspberry Pi 3B+ provides sufficient processing power for Klipper’s demands, especially for running Input Shaping and Pressure Advance. Ensuring the power supply is stable and adequate (2.5A or higher) is critical for preventing undervoltage issues during computationally intensive operations.  Results  Enables the core functionality of the entire project: fast, precise, and remotely controllable 3D printing. It dramatically reduces motion system artifacts, allows for real-time monitoring and tuning via a web interface, and provides the necessary processing headroom for pushing print speeds well beyond the stock printer’s capabilities.BDsensor  Description  BD sensor is the first distance sensor that can work with 3D printer and do fast bed leveling and adjust z axis in real time. Integration required careful adherence to the wiring and pin configuration guide found at: https://www.youtube.com/watch?v=VDOYYskbxV8   Part List  The parts required were a BDsensor (bought here https://www.pandapi3d.com/bdsensor) and the modified portion of the custom hotend cooling  Note that the cable connecting to the black magnetic core coil is somewhat fragile and can snap off it turned or twisted too much.  Results  The results are the BDsensor are a before and after of using a different bedleveling hardware call a bltouch.SKR Mini E3 V3 Motherboard  Description  The SKR Mini E3 V3 is a popular drop-in replacement mainboard for the Ender 3. It features a more powerful 32-bit processor (STM32G0B1RET6) and integrated TMC2209 silent stepper drivers. This upgrade significantly reduces motor noise and provides more processing power, which is beneficial for running Klipper firmware smoothly and handling complex calculations for high-speed printing. Installation required careful wiring of existing components to the new board’s specific pinouts.   Part List  BIGTREETECH SKR Mini E3 V3 Motherboard (https://biqu.equipment/products/bigtreetech-skr-mini-e3-v2-0-32-bit-control-board-for-ender-3)  Note (Troubleshooting): I’ve found that occasionally after updating the Klipper software on the Raspberry Pi host, the BDsensor will fail to initialize. The required fix is to manually recompile and re-flash the .bin firmware file onto the SKR Mini E3 V3 board to restore full sensor functionality.  Results  This upgrade leads to noticeably quieter printer operation due to the TMC2209 drivers. The 32-bit processor allows Klipper to run more efficiently, potentially enabling higher microstepping, faster processing of G-code, and smoother execution of features like Input Shaping and Pressure Advance, contributing to both speed and quality improvements.Dual Z axis  Description  This modification adds a second Z-axis lead screw and stepper motor to the Ender 3, mirroring the existing one on the other side of the X-gantry. The primary goal is to improve Z-axis stability and prevent gantry sag, especially on the side opposite the original lead screw. This was a critical step to support the weight of the heavier direct drive extruder.   Part List  Dual Z-axis upgrade kit, typically including a lead screw, stepper motor, mounting brackets, coupler, and wiring harness. (Example kit: https://www.amazon.com/Official-Creality-Upgrade-Stepper-3D/dp/B09N8QQDSP)  Note: Proper gantry alignment (tramming) after installation is critical to prevent Z-binding and ensure smooth vertical movement. Klipper configuration adjustments were necessary to define the second Z-stepper as a mirror of the primary motor.  Results  The dual Z-axis setup significantly improves the stability of the X-gantry, leading to more consistent layer heights across the entire width of the print bed. This reduces artifacts related to gantry sag and potential binding, contributing to better overall print quality, especially on taller prints or those requiring precise Z-movement.Direct Drive Orbiter V2.0 Extruder  Description  The Orbiter V2.0 is a lightweight, compact, and high-performance direct drive extruder. Replacing the stock Bowden setup, it mounts the extruder motor directly on the hotend assembly. This drastically shortens the filament path, providing much more precise control over extrusion and retraction. The Orbiter’s geared design (7.5:1 ratio) offers high torque in a small package.   Part List  Orbiter V2.0 Extruder (https://www.orbiterprojects.com/orbiter-v2-0/). May require a specific 3D printed mount to attach to the Ender 3’s X-carriage and hotend (potentially integrated with the custom cooling duct).  Note: Implementing this change required careful Klipper configuration. The Orbiter’s specific rotation_distance was sourced from the official documentation, and the retraction settings were drastically reduced (I now run between 0.5mm - 1.5mm). Tuning Pressure Advance after installation was absolutely critical to maximize the print quality at higher speeds. I followed the firmware configuration details on the official Orbiter project page: https://www.orbiterprojects.com/orbiter-v2-0/  Results  Direct drive, especially with a capable extruder like the Orbiter V2.0, dramatically improves retraction performance, reducing stringing and oozing. It enables reliable printing of flexible filaments (like TPU) and allows for potentially faster printing speeds due to quicker and more accurate extrusion control, directly impacting print quality and speed capabilities.Custom Hotend Cooling (Apollolander Dual 5015)  Description  This is a custom-designed, 3D-printed hotend shroud (Apollolander model) specifically adapted for the Ender 3’s stock hotend. It utilizes two powerful 5015 radial (blower) fans for part cooling, offering significantly increased airflow compared to the single, smaller stock fan. The shroud was printed in PETG for heat resistance.   Part List  3D Printed Parts for the Apollolander shroud (https://www.printables.com/model/544890-apollolander-stock-hotend-dual-5015), two 5015 blower fans (24V), appropriate screws (likely M3), and wiring.  Note: Ensure the 5015 fans are the correct voltage (24V for Ender 3). The increased airflow is substantial; you may need to run the fans at lower percentages (e.g., 30-70%) for materials like PETG or ABS to prevent warping or layer adhesion issues.  Results  The vastly improved part cooling allows for much faster printing speeds, especially when dealing with overhangs and bridges, which solidify more quickly. This leads to cleaner prints, sharper details, and enables pushing the printer’s speed limits further, particularly with PLA filament.CHT nozzle  Description  The Bondtech CHT (Core Heating Technology) nozzle is a specialized nozzle designed to increase the melting rate of filament. It features a unique internal geometry that splits the filament into multiple strands just before exiting, significantly increasing the surface area in contact with the heated nozzle walls. This allows the filament to absorb heat much faster.   Part List  Bondtech CHT Coated Brass Nozzle (ensure correct size, e.g., 0.4mm, and thread type, MK8 for Ender 3) (https://www.bondtech.se/product/bondtech-cht-coated-brass-nozzle/)  Note: This nozzle’s melting efficiency is very high. Through testing, I’ve found that CHT clones available on sites like AliExpress can actually achieve very similar performance results to the original Bondtech, making them a viable, cost-effective alternative for volumetric flow improvements. Retuning print profiles (speed, potentially temperature) is highly recommended.  Results  The primary result is a substantial increase in the maximum volumetric flow rate the hotend can sustain. This directly translates to the ability to print much faster without the print quality degrading due to the hotend’s inability to melt plastic quickly enough. It’s a key modification for maximizing print speed.Slimmer PSU (Meanwell)  Description  This modification replaces the stock Ender 3 power supply unit (PSU) with a slimmer, typically higher-quality Meanwell model (often the LRS-350-24). Besides freeing up vertical space beneath the printer, Meanwell PSUs are generally known for their reliability, efficiency, and stable power output compared to some stock units.   Part List  Meanwell LRS-350-24 Power Supply (or similar 24V model) (https://creality3dofficial.com/products/meanwell-switching-enclosed-power-supply), potentially 3D printed mounting brackets if relocating the PSU.  DANGER: When my unit arrived, the voltage selector switch was set to the 240V position. It is critical to ensure you move this switch to the 120V setting if you are operating in the US or any other region using 120V mains power. Always confirm the power is off before touching any internal wiring.  Results  Provides more clearance under the printer, useful for custom enclosures or component placement. Offers potentially more stable and reliable power delivery to the mainboard and other components, which can contribute to overall system stability, especially during demanding high-speed prints. It’s often considered a reliability and safety upgrade.PTFE Bowden Tube (Capricorn)  Description  This refers to upgrading the stock white PTFE tube with a higher-quality one, such as the blue Capricorn tubing. In a Bowden setup, this reduces filament slop and improves retraction. However, for this project, the tube was used solely to manage the short path to the direct drive extruder.    Part List  Capricorn PTFE tubing (https://store.creality.com/products/capricorn-teflon-tube-and-pneumatic-connector-package), potentially upgraded pneumatic couplers for better tube grip.  Note: With the Orbiter V2.0 Direct Drive extruder installed, the long Bowden tube is no longer needed. A very short segment of this Capricorn tubing was used as a filament guide before the extruder, which works perfectly."
  }
  
]

